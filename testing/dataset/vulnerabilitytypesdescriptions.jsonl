{"vulnerabilitytype": "Frontrunning", "vulnerabilitydescription": "An attack where an attacker observes pending transactions and creates a new transaction with a higher gas price, enabling it to be processed before the observed transaction. This is often done to gain an unfair advantage in decentralized exchanges or other time-sensitive operations."}
{"vulnerabilitytype": "Backrunning", "vulnerabilitydescription": "Similar to frontrunning, backrunning is when an attacker observes a transaction and creates a new transaction with a lower gas price to be processed immediately after the target transaction. This can be used to exploit arbitrage opportunities or manipulate market prices."}
{"vulnerabilitytype": "Sandwiching", "vulnerabilitydescription": "An attacker observes a large transaction, like a buy or sell order, and places transactions before and after the target transaction to profit from the price impact. This manipulates the market price and allows the attacker to exploit the price difference."}
{"vulnerabilitytype": "Transaction order dependency", "vulnerabilitydescription": "An attack exploiting the dependency of transactions on their order of execution. The attacker manipulates the transaction order to gain an unfair advantage, leading to unintended outcomes for users."}
{"vulnerabilitytype": "Transaction / strategy replay", "vulnerabilitydescription": "An attacker reuses a previously signed transaction to execute the same action once or possibly multiple times, causing unintended consequences for the victim, such as stealing the victim’s trade strategy, double-spending or unauthorized withdrawals."}
{"vulnerabilitytype": "Randomness", "vulnerabilitydescription": "An attack exploiting the lack of true randomness in blockchain protocols, potentially enabling attackers to predict or manipulate outcomes in games, lotteries, or other applications that rely on random number generation. The block hash, for example, can be manipulated by miners to influence the outcome of a game."}
{"vulnerabilitytype": "Other block state dependency", "vulnerabilitydescription": "An attack exploiting the dependency of a transaction on the state of the blockchain, such as block timestamp or blockhash, allowing the attacker to manipulate outcomes by influencing the block state."}
{"vulnerabilitytype": "Fake tokens", "vulnerabilitydescription": "The creation and distribution of counterfeit tokens that impersonate legitimate ones, tricking users into interacting with the fake tokens and causing financial losses. Fake ERC20 implementations, for example, can be used to steal funds from users, instead of transferring them to the intended recipient."}
{"vulnerabilitytype": "Other fake contracts", "vulnerabilitydescription": "The deployment of fraudulent smart contracts that mimic the functionality of legitimate ones but contain malicious code or hidden backdoors, allowing the attacker to steal funds or perform unauthorized actions."}
{"vulnerabilitytype": "On-chain oracle manipulation", "vulnerabilitydescription": "The attacker manipulates an oracle, a source of external data for smart contracts, to provide incorrect or misleading information, leading to unintended contract behavior and potential financial losses for users. Oracles often report prices, and manipulating them can be used to exploit arbitrage opportunities or manipulate market prices."}
{"vulnerabilitytype": "Governance attack", "vulnerabilitydescription": "An attack targeting the governance mechanisms of a decentralized protocol or organization, often through collusion or bribery, to gain control over decision-making and exploit the system for personal gain. For example, a flash loan attacker could lend out the governance token, vote on a proposal, and then return the loan, all within a single transaction."}
{"vulnerabilitytype": "Token standard incompatibility", "vulnerabilitydescription": "An attack exploiting inconsistencies or incompatibilities between token standards, such as ERC-20 and ERC-721, potentially causing unintended behavior and financial losses for users."}
{"vulnerabilitytype": "Flash liquidity borrow, purchase, mint, or deposit", "vulnerabilitydescription": "An attack using borrowed assets to manipulate market prices, execute trades, or exploit arbitrage opportunities before repaying the borrowed assets within a single transaction, often with little to no collateral."}
{"vulnerabilitytype": "Unsafe call to phantom function", "vulnerabilitydescription": "An attack that exploits a smart contract’s fallback function, which is executed when the contract receives a transaction with no matching function call. The attacker sends malicious data, triggering unintended behavior and potentially causing financial losses."}
{"vulnerabilitytype": "Other unsafe DeFi protocol dependency", "vulnerabilitydescription": "An attack exploiting vulnerabilities in one decentralized finance (DeFi) protocol that has a dependency on another, potentially leading to cascading failures and financial losses across multiple protocols."}
{"vulnerabilitytype": "Unfair slippage protection", "vulnerabilitydescription": "An attack exploiting poorly implemented slippage protection mechanisms in decentralized exchanges, allowing the attacker to bypass limits and manipulate market prices or exploit arbitrage opportunities."}
{"vulnerabilitytype": "Unfair liquidity providing", "vulnerabilitydescription": "An attack involving the manipulation of liquidity pools to gain an unfair advantage or profit, often by providing a disproportionate amount of tokens or assets to skew the pool’s balance."}
{"vulnerabilitytype": "Unsafe or infinite token approval", "vulnerabilitydescription": "An attack exploiting a smart contract’s token approval mechanism, enabling the attacker to spend an unlimited amount of tokens on behalf of the victim or cause unintended token transfers."}
{"vulnerabilitytype": "Other unfair or unsafe DeFi protocol interaction", "vulnerabilitydescription": "An attack involving the manipulation or exploitation of interactions between different DeFi protocols, leading to unintended behavior or financial losses for users."}
{"vulnerabilitytype": "Other DeFi protocol design flaw", "vulnerabilitydescription": "An attack exploiting design flaws in DeFi protocols, which may result in unintended behavior, vulnerabilities, or financial losses for users."}
{"vulnerabilitytype": "Direct call to untrusted contract", "vulnerabilitydescription": "An attack where a smart contract directly calls an untrusted external contract, potentially allowing the attacker to manipulate the calling contract’s behavior or state."}
{"vulnerabilitytype": "Reentrancy", "vulnerabilitydescription": "An attack in which an external contract repeatedly calls a vulnerable function in the target contract before the initial call has completed, potentially leading to unintended behavior or financial losses. Several forms of reentrancy attacks exist, including cross-function reentrancy, cross-contract reentrancy, recursive reentrancy, and read-only reentrancy."}
{"vulnerabilitytype": "Delegatecall injection", "vulnerabilitydescription": "An attack exploiting the delegatecall opcode, which enables a contract to execute code from another contract. The attacker manipulates the called contract’s code to execute malicious actions on the calling contract."}
{"vulnerabilitytype": "Unhandled or mishandled exception", "vulnerabilitydescription": "An attack exploiting situations where a smart contract does not properly handle exceptions, potentially leading to unintended behavior or vulnerabilities."}
{"vulnerabilitytype": "Locked or frozen tokens", "vulnerabilitydescription": "An attack that results in tokens becoming inaccessible or non-transferable, either through smart contract design flaws or external manipulation."}
{"vulnerabilitytype": "Integer overflow or underflow", "vulnerabilitydescription": "An attack exploiting arithmetic errors in smart contracts, such as integer overflows or underflows, leading to unintended behavior and potential financial losses."}
{"vulnerabilitytype": "Absence of code logic or sanity check", "vulnerabilitydescription": "An attack targeting the lack of proper code logic or sanity checks in smart contracts, potentially leading to vulnerabilities or unintended behavior. For example, a smart contract may not check if a user has sufficient funds, or privileges before executing a transaction. Transaction modifiers can be used to prevent this."}
{"vulnerabilitytype": "Casting", "vulnerabilitydescription": "An attack exploiting type casting issues in smart contracts, potentially causing unintended behavior or vulnerabilities."}
{"vulnerabilitytype": "Unbounded operation, including gas limit and call-stack depth", "vulnerabilitydescription": "An attack targeting unbounded operations, such as loops or recursion, which can lead to excessive gas usage or call-stack depth issues, causing transactions to fail or smart contracts to become unresponsive."}
{"vulnerabilitytype": "Arithmetic mistakes", "vulnerabilitydescription": "An attack exploiting incorrect arithmetic operations in smart contracts, leading to unintended behavior or financial losses."}
{"vulnerabilitytype": "Other coding mistakes", "vulnerabilitydescription": "An attack targeting various coding errors or oversights in smart contracts, potentially leading to vulnerabilities, unintended behavior, or financial losses."}
{"vulnerabilitytype": "Inconsistent access control", "vulnerabilitydescription": "An attack exploiting inconsistencies in access control mechanisms, allowing unauthorized users to perform restricted actions or access sensitive data."}
{"vulnerabilitytype": "Visibility errors, including unrestricted action", "vulnerabilitydescription": "An attack exploiting visibility errors in smart contracts, such as functions being marked as public when they should be private or internal, leading to unauthorized actions or vulnerabilities."}
{"vulnerabilitytype": "Underpriced opcodes", "vulnerabilitydescription": "An attack exploiting underpriced opcodes in the Ethereum Virtual Machine, potentially causing excessive gas usage, denial-of-service attacks, or other unintended consequences."}
{"vulnerabilitytype": "Outdated compiler version", "vulnerabilitydescription": "An attack targeting smart contracts compiled with outdated or vulnerable compiler versions, potentially leading to vulnerabilities or unintended behavior."}
{"vulnerabilitytype": "Known vulnerability not patched", "vulnerabilitydescription": "An attack exploiting known vulnerabilities in smart contracts that have not been properly patched or updated, potentially causing financial losses or other unintended consequences."}
{"vulnerabilitytype": "Broken patch", "vulnerabilitydescription": "An attack targeting flawed or incomplete patches applied to smart contracts, potentially leading to the reintroduction of vulnerabilities or the introduction of new vulnerabilities."}
{"vulnerabilitytype": "Other smart contract vulnerabilities", "vulnerabilitydescription": "An attack exploiting various other vulnerabilities in smart contracts not covered by the above categories, potentially leading to unintended behavior, vulnerabilities, or financial losses."}